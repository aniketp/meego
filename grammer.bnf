/* Lexical Parser */
!whitespace : '\t' | '\n' | '\r' | ' ' ;
!lineComment : '/' '/' { . } '\n' ;
!blockComment : '/' '*' { . | '*' } '*' '/' ;

_letter : 'A'-'Z' | 'a'-'z' | '_' ;
_digit : '0'-'9' ;
_alpha : _letter | _digit ;

string_literal : '"' {_alpha | ' ' | '!' | '?' }'"' ;
int : '0' | '1'-'9' {_digit} ;

/* Keywords */
func : 'f' 'u' 'n' 'c' ;
let : 'l' 'e' 't' ;
if : 'i' 'f' ;
else : 'e' 'l' 's' 'e' ;
return : 'r' 'e' 't' 'u' 'r' 'n' ;
true : 't' 'r' 'u' 'e' ;
false : 'f' 'a' 'l' 's' 'e' ;
and : 'a' 'n' 'd' ;
or : 'o' 'r' ;

ident : _letter {_alpha} ;

/* Punctuation */
plus : '+' ;
minus : '-' ;
mul : '*' ;

eq : '=' '=' ;
lt : '<' ;
gt : '>' ;

lbrace : '{' ;
rbrace : '}' ;
assign : '=' ;
lparen : '(' ;
rparen : ')' ;
comma : ',' ;
semicolon : ';' ;
period : '.' ;
colon : ':' ;


/* Syntactic Parser */
Program
	: Functions Statements
	;

Functions
	: Functions Function
	| empty
	;

Statements
	: Statements Statement
	| empty
	;

Function
	: func ident lparen FormalArgs rparen ident StatementBlock

Statement
	: if Expression StatementBlock IfStatement
	| for Expression StatementBlock
	| let ident assign kind Expression semicolon
	| Expression semicolon
	| return semicolon
	| return Expression semicolon
	;

IfStatement
	: elif Expression StatementBlock IfStatement
	| else StatementBlock
	| empty
	;

StatementBlock
	: lbrace Statement rbrace
	;

Expression
	: Expression Operation Term
	| Term
	;

Operation
	: plus
	| minus
	| lt
	| gt
	| eq
	| neq
	| and
	| or
	;

Term
	: Term mul Factor
	| Term div Factor
	| string_literal
	| Bool
	| Factor
	;

Factor
	: lparen Expression rparen
	| int
	| ident
	| ident lparen Args rparen
	| error
	;

Bool
	: true
	| false

Args
	: Expression ArgsList
	| empty
	;

ArgsList
	: ArgsList comma Expression
	| empty
	;

FormalArgs
	: ident ident FormalArgsList
	| empty
	;

FormalArgsList
	: FormalArgsList comma ident ident
	| empty
	;