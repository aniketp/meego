// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/aniketp/go-compiler/token"
)

const (
	NoState    = -1
	NumStates  = 69
	NumSymbols = 81
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: ' '
2: '!'
3: '?'
4: '"'
5: '0'
6: 'f'
7: 'u'
8: 'n'
9: 'c'
10: 'l'
11: 'e'
12: 't'
13: 'i'
14: 'f'
15: 'e'
16: 'l'
17: 'i'
18: 'f'
19: 'e'
20: 'l'
21: 's'
22: 'e'
23: 'r'
24: 'e'
25: 't'
26: 'u'
27: 'r'
28: 'n'
29: 't'
30: 'r'
31: 'u'
32: 'e'
33: 'f'
34: 'a'
35: 'l'
36: 's'
37: 'e'
38: 'a'
39: 'n'
40: 'd'
41: 'f'
42: 'o'
43: 'r'
44: 'o'
45: 'r'
46: '+'
47: '-'
48: '*'
49: '/'
50: '='
51: '='
52: '!'
53: '='
54: '<'
55: '>'
56: '{'
57: '}'
58: '='
59: '('
60: ')'
61: ','
62: ';'
63: '_'
64: '\t'
65: '\n'
66: '\r'
67: ' '
68: '/'
69: '/'
70: '\n'
71: '/'
72: '*'
73: '*'
74: '*'
75: '/'
76: '1'-'9'
77: 'A'-'Z'
78: 'a'-'z'
79: '0'-'9'
80: .
*/
