// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(3), /* $, reduce: Functions */
			nil,       /* empty */
			reduce(3), /* func, reduce: Functions */
			reduce(3), /* ident, reduce: Functions */
			reduce(3), /* lparen, reduce: Functions */
			nil,       /* rparen */
			reduce(3), /* if, reduce: Functions */
			reduce(3), /* for, reduce: Functions */
			reduce(3), /* let, reduce: Functions */
			nil,       /* assign */
			nil,       /* semicolon */
			reduce(3), /* return, reduce: Functions */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			reduce(3), /* string_literal, reduce: Functions */
			reduce(3), /* int, reduce: Functions */
			reduce(3), /* error, reduce: Functions */
			reduce(3), /* true, reduce: Functions */
			reduce(3), /* false, reduce: Functions */
			nil,       /* comma */
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          /* INVALID */
			accept(true), /* $ */
			nil,          /* empty */
			nil,          /* func */
			nil,          /* ident */
			nil,          /* lparen */
			nil,          /* rparen */
			nil,          /* if */
			nil,          /* for */
			nil,          /* let */
			nil,          /* assign */
			nil,          /* semicolon */
			nil,          /* return */
			nil,          /* elif */
			nil,          /* else */
			nil,          /* lbrace */
			nil,          /* rbrace */
			nil,          /* plus */
			nil,          /* minus */
			nil,          /* lt */
			nil,          /* gt */
			nil,          /* eq */
			nil,          /* neq */
			nil,          /* and */
			nil,          /* or */
			nil,          /* mul */
			nil,          /* div */
			nil,          /* string_literal */
			nil,          /* int */
			nil,          /* error */
			nil,          /* true */
			nil,          /* false */
			nil,          /* comma */
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(5), /* $, reduce: Statements */
			nil,       /* empty */
			shift(5),  /* func */
			reduce(5), /* ident, reduce: Statements */
			reduce(5), /* lparen, reduce: Statements */
			nil,       /* rparen */
			reduce(5), /* if, reduce: Statements */
			reduce(5), /* for, reduce: Statements */
			reduce(5), /* let, reduce: Statements */
			nil,       /* assign */
			nil,       /* semicolon */
			reduce(5), /* return, reduce: Statements */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			reduce(5), /* string_literal, reduce: Statements */
			reduce(5), /* int, reduce: Statements */
			reduce(5), /* error, reduce: Statements */
			reduce(5), /* true, reduce: Statements */
			reduce(5), /* false, reduce: Statements */
			nil,       /* comma */
		},
	},
	actionRow{ // S3
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(1), /* $, reduce: Program */
			nil,       /* empty */
			nil,       /* func */
			shift(7),  /* ident */
			shift(8),  /* lparen */
			nil,       /* rparen */
			shift(9),  /* if */
			shift(11), /* for */
			shift(12), /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			shift(13), /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(16), /* string_literal */
			shift(18), /* int */
			shift(19), /* error */
			shift(20), /* true */
			shift(21), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(2), /* $, reduce: Functions */
			nil,       /* empty */
			reduce(2), /* func, reduce: Functions */
			reduce(2), /* ident, reduce: Functions */
			reduce(2), /* lparen, reduce: Functions */
			nil,       /* rparen */
			reduce(2), /* if, reduce: Functions */
			reduce(2), /* for, reduce: Functions */
			reduce(2), /* let, reduce: Functions */
			nil,       /* assign */
			nil,       /* semicolon */
			reduce(2), /* return, reduce: Functions */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			reduce(2), /* string_literal, reduce: Functions */
			reduce(2), /* int, reduce: Functions */
			reduce(2), /* error, reduce: Functions */
			reduce(2), /* true, reduce: Functions */
			reduce(2), /* false, reduce: Functions */
			nil,       /* comma */
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(22), /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(4), /* $, reduce: Statements */
			nil,       /* empty */
			nil,       /* func */
			reduce(4), /* ident, reduce: Statements */
			reduce(4), /* lparen, reduce: Statements */
			nil,       /* rparen */
			reduce(4), /* if, reduce: Statements */
			reduce(4), /* for, reduce: Statements */
			reduce(4), /* let, reduce: Statements */
			nil,       /* assign */
			nil,       /* semicolon */
			reduce(4), /* return, reduce: Statements */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			reduce(4), /* string_literal, reduce: Statements */
			reduce(4), /* int, reduce: Statements */
			reduce(4), /* error, reduce: Statements */
			reduce(4), /* true, reduce: Statements */
			reduce(4), /* false, reduce: Statements */
			nil,       /* comma */
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			shift(23),  /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(34), /* semicolon, reduce: Factor */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(34), /* plus, reduce: Factor */
			reduce(34), /* minus, reduce: Factor */
			reduce(34), /* lt, reduce: Factor */
			reduce(34), /* gt, reduce: Factor */
			reduce(34), /* eq, reduce: Factor */
			reduce(34), /* neq, reduce: Factor */
			reduce(34), /* and, reduce: Factor */
			reduce(34), /* or, reduce: Factor */
			reduce(34), /* mul, reduce: Factor */
			reduce(34), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S8
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(24), /* ident */
			shift(25), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(29), /* string_literal */
			shift(31), /* int */
			shift(32), /* error */
			shift(33), /* true */
			shift(34), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S9
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(35), /* ident */
			shift(36), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(40), /* string_literal */
			shift(42), /* int */
			shift(43), /* error */
			shift(44), /* true */
			shift(45), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			shift(46), /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			shift(48), /* plus */
			shift(49), /* minus */
			shift(50), /* lt */
			shift(51), /* gt */
			shift(52), /* eq */
			shift(53), /* neq */
			shift(54), /* and */
			shift(55), /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S11
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(35), /* ident */
			shift(36), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(40), /* string_literal */
			shift(42), /* int */
			shift(43), /* error */
			shift(44), /* true */
			shift(45), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(57), /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S13
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(7),  /* ident */
			shift(8),  /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			shift(59), /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(16), /* string_literal */
			shift(18), /* int */
			shift(19), /* error */
			shift(20), /* true */
			shift(21), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(18), /* semicolon, reduce: Expression */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(18), /* plus, reduce: Expression */
			reduce(18), /* minus, reduce: Expression */
			reduce(18), /* lt, reduce: Expression */
			reduce(18), /* gt, reduce: Expression */
			reduce(18), /* eq, reduce: Expression */
			reduce(18), /* neq, reduce: Expression */
			reduce(18), /* and, reduce: Expression */
			reduce(18), /* or, reduce: Expression */
			shift(60),  /* mul */
			shift(61),  /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(31), /* semicolon, reduce: Term */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(31), /* plus, reduce: Term */
			reduce(31), /* minus, reduce: Term */
			reduce(31), /* lt, reduce: Term */
			reduce(31), /* gt, reduce: Term */
			reduce(31), /* eq, reduce: Term */
			reduce(31), /* neq, reduce: Term */
			reduce(31), /* and, reduce: Term */
			reduce(31), /* or, reduce: Term */
			reduce(31), /* mul, reduce: Term */
			reduce(31), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(29), /* semicolon, reduce: Term */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(29), /* plus, reduce: Term */
			reduce(29), /* minus, reduce: Term */
			reduce(29), /* lt, reduce: Term */
			reduce(29), /* gt, reduce: Term */
			reduce(29), /* eq, reduce: Term */
			reduce(29), /* neq, reduce: Term */
			reduce(29), /* and, reduce: Term */
			reduce(29), /* or, reduce: Term */
			reduce(29), /* mul, reduce: Term */
			reduce(29), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(30), /* semicolon, reduce: Term */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(30), /* plus, reduce: Term */
			reduce(30), /* minus, reduce: Term */
			reduce(30), /* lt, reduce: Term */
			reduce(30), /* gt, reduce: Term */
			reduce(30), /* eq, reduce: Term */
			reduce(30), /* neq, reduce: Term */
			reduce(30), /* and, reduce: Term */
			reduce(30), /* or, reduce: Term */
			reduce(30), /* mul, reduce: Term */
			reduce(30), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(33), /* semicolon, reduce: Factor */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(33), /* plus, reduce: Factor */
			reduce(33), /* minus, reduce: Factor */
			reduce(33), /* lt, reduce: Factor */
			reduce(33), /* gt, reduce: Factor */
			reduce(33), /* eq, reduce: Factor */
			reduce(33), /* neq, reduce: Factor */
			reduce(33), /* and, reduce: Factor */
			reduce(33), /* or, reduce: Factor */
			reduce(33), /* mul, reduce: Factor */
			reduce(33), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S19
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(36), /* semicolon, reduce: Factor */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(36), /* plus, reduce: Factor */
			reduce(36), /* minus, reduce: Factor */
			reduce(36), /* lt, reduce: Factor */
			reduce(36), /* gt, reduce: Factor */
			reduce(36), /* eq, reduce: Factor */
			reduce(36), /* neq, reduce: Factor */
			reduce(36), /* and, reduce: Factor */
			reduce(36), /* or, reduce: Factor */
			reduce(36), /* mul, reduce: Factor */
			reduce(36), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(37), /* semicolon, reduce: Bool */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(37), /* plus, reduce: Bool */
			reduce(37), /* minus, reduce: Bool */
			reduce(37), /* lt, reduce: Bool */
			reduce(37), /* gt, reduce: Bool */
			reduce(37), /* eq, reduce: Bool */
			reduce(37), /* neq, reduce: Bool */
			reduce(37), /* and, reduce: Bool */
			reduce(37), /* or, reduce: Bool */
			reduce(37), /* mul, reduce: Bool */
			reduce(37), /* div, reduce: Bool */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(38), /* semicolon, reduce: Bool */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(38), /* plus, reduce: Bool */
			reduce(38), /* minus, reduce: Bool */
			reduce(38), /* lt, reduce: Bool */
			reduce(38), /* gt, reduce: Bool */
			reduce(38), /* eq, reduce: Bool */
			reduce(38), /* neq, reduce: Bool */
			reduce(38), /* and, reduce: Bool */
			reduce(38), /* or, reduce: Bool */
			reduce(38), /* mul, reduce: Bool */
			reduce(38), /* div, reduce: Bool */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			shift(62), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S23
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(63),  /* ident */
			shift(64),  /* lparen */
			reduce(40), /* rparen, reduce: Args */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(68),  /* string_literal */
			shift(70),  /* int */
			shift(72),  /* error */
			shift(73),  /* true */
			shift(74),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			shift(75),  /* lparen */
			reduce(34), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(34), /* plus, reduce: Factor */
			reduce(34), /* minus, reduce: Factor */
			reduce(34), /* lt, reduce: Factor */
			reduce(34), /* gt, reduce: Factor */
			reduce(34), /* eq, reduce: Factor */
			reduce(34), /* neq, reduce: Factor */
			reduce(34), /* and, reduce: Factor */
			reduce(34), /* or, reduce: Factor */
			reduce(34), /* mul, reduce: Factor */
			reduce(34), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S25
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(24), /* ident */
			shift(25), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(29), /* string_literal */
			shift(31), /* int */
			shift(32), /* error */
			shift(33), /* true */
			shift(34), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			shift(77), /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			shift(48), /* plus */
			shift(49), /* minus */
			shift(50), /* lt */
			shift(51), /* gt */
			shift(52), /* eq */
			shift(53), /* neq */
			shift(54), /* and */
			shift(55), /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(18), /* rparen, reduce: Expression */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(18), /* plus, reduce: Expression */
			reduce(18), /* minus, reduce: Expression */
			reduce(18), /* lt, reduce: Expression */
			reduce(18), /* gt, reduce: Expression */
			reduce(18), /* eq, reduce: Expression */
			reduce(18), /* neq, reduce: Expression */
			reduce(18), /* and, reduce: Expression */
			reduce(18), /* or, reduce: Expression */
			shift(79),  /* mul */
			shift(80),  /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(31), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(31), /* plus, reduce: Term */
			reduce(31), /* minus, reduce: Term */
			reduce(31), /* lt, reduce: Term */
			reduce(31), /* gt, reduce: Term */
			reduce(31), /* eq, reduce: Term */
			reduce(31), /* neq, reduce: Term */
			reduce(31), /* and, reduce: Term */
			reduce(31), /* or, reduce: Term */
			reduce(31), /* mul, reduce: Term */
			reduce(31), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(29), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(29), /* plus, reduce: Term */
			reduce(29), /* minus, reduce: Term */
			reduce(29), /* lt, reduce: Term */
			reduce(29), /* gt, reduce: Term */
			reduce(29), /* eq, reduce: Term */
			reduce(29), /* neq, reduce: Term */
			reduce(29), /* and, reduce: Term */
			reduce(29), /* or, reduce: Term */
			reduce(29), /* mul, reduce: Term */
			reduce(29), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(30), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(30), /* plus, reduce: Term */
			reduce(30), /* minus, reduce: Term */
			reduce(30), /* lt, reduce: Term */
			reduce(30), /* gt, reduce: Term */
			reduce(30), /* eq, reduce: Term */
			reduce(30), /* neq, reduce: Term */
			reduce(30), /* and, reduce: Term */
			reduce(30), /* or, reduce: Term */
			reduce(30), /* mul, reduce: Term */
			reduce(30), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(33), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(33), /* plus, reduce: Factor */
			reduce(33), /* minus, reduce: Factor */
			reduce(33), /* lt, reduce: Factor */
			reduce(33), /* gt, reduce: Factor */
			reduce(33), /* eq, reduce: Factor */
			reduce(33), /* neq, reduce: Factor */
			reduce(33), /* and, reduce: Factor */
			reduce(33), /* or, reduce: Factor */
			reduce(33), /* mul, reduce: Factor */
			reduce(33), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S32
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(36), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(36), /* plus, reduce: Factor */
			reduce(36), /* minus, reduce: Factor */
			reduce(36), /* lt, reduce: Factor */
			reduce(36), /* gt, reduce: Factor */
			reduce(36), /* eq, reduce: Factor */
			reduce(36), /* neq, reduce: Factor */
			reduce(36), /* and, reduce: Factor */
			reduce(36), /* or, reduce: Factor */
			reduce(36), /* mul, reduce: Factor */
			reduce(36), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(37), /* rparen, reduce: Bool */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(37), /* plus, reduce: Bool */
			reduce(37), /* minus, reduce: Bool */
			reduce(37), /* lt, reduce: Bool */
			reduce(37), /* gt, reduce: Bool */
			reduce(37), /* eq, reduce: Bool */
			reduce(37), /* neq, reduce: Bool */
			reduce(37), /* and, reduce: Bool */
			reduce(37), /* or, reduce: Bool */
			reduce(37), /* mul, reduce: Bool */
			reduce(37), /* div, reduce: Bool */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S34
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(38), /* rparen, reduce: Bool */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(38), /* plus, reduce: Bool */
			reduce(38), /* minus, reduce: Bool */
			reduce(38), /* lt, reduce: Bool */
			reduce(38), /* gt, reduce: Bool */
			reduce(38), /* eq, reduce: Bool */
			reduce(38), /* neq, reduce: Bool */
			reduce(38), /* and, reduce: Bool */
			reduce(38), /* or, reduce: Bool */
			reduce(38), /* mul, reduce: Bool */
			reduce(38), /* div, reduce: Bool */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			shift(81),  /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(34), /* lbrace, reduce: Factor */
			nil,        /* rbrace */
			reduce(34), /* plus, reduce: Factor */
			reduce(34), /* minus, reduce: Factor */
			reduce(34), /* lt, reduce: Factor */
			reduce(34), /* gt, reduce: Factor */
			reduce(34), /* eq, reduce: Factor */
			reduce(34), /* neq, reduce: Factor */
			reduce(34), /* and, reduce: Factor */
			reduce(34), /* or, reduce: Factor */
			reduce(34), /* mul, reduce: Factor */
			reduce(34), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S36
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(24), /* ident */
			shift(25), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(29), /* string_literal */
			shift(31), /* int */
			shift(32), /* error */
			shift(33), /* true */
			shift(34), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S37
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			shift(84), /* lbrace */
			nil,       /* rbrace */
			shift(48), /* plus */
			shift(49), /* minus */
			shift(50), /* lt */
			shift(51), /* gt */
			shift(52), /* eq */
			shift(53), /* neq */
			shift(54), /* and */
			shift(55), /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(18), /* lbrace, reduce: Expression */
			nil,        /* rbrace */
			reduce(18), /* plus, reduce: Expression */
			reduce(18), /* minus, reduce: Expression */
			reduce(18), /* lt, reduce: Expression */
			reduce(18), /* gt, reduce: Expression */
			reduce(18), /* eq, reduce: Expression */
			reduce(18), /* neq, reduce: Expression */
			reduce(18), /* and, reduce: Expression */
			reduce(18), /* or, reduce: Expression */
			shift(86),  /* mul */
			shift(87),  /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S39
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(31), /* lbrace, reduce: Term */
			nil,        /* rbrace */
			reduce(31), /* plus, reduce: Term */
			reduce(31), /* minus, reduce: Term */
			reduce(31), /* lt, reduce: Term */
			reduce(31), /* gt, reduce: Term */
			reduce(31), /* eq, reduce: Term */
			reduce(31), /* neq, reduce: Term */
			reduce(31), /* and, reduce: Term */
			reduce(31), /* or, reduce: Term */
			reduce(31), /* mul, reduce: Term */
			reduce(31), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(29), /* lbrace, reduce: Term */
			nil,        /* rbrace */
			reduce(29), /* plus, reduce: Term */
			reduce(29), /* minus, reduce: Term */
			reduce(29), /* lt, reduce: Term */
			reduce(29), /* gt, reduce: Term */
			reduce(29), /* eq, reduce: Term */
			reduce(29), /* neq, reduce: Term */
			reduce(29), /* and, reduce: Term */
			reduce(29), /* or, reduce: Term */
			reduce(29), /* mul, reduce: Term */
			reduce(29), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S41
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(30), /* lbrace, reduce: Term */
			nil,        /* rbrace */
			reduce(30), /* plus, reduce: Term */
			reduce(30), /* minus, reduce: Term */
			reduce(30), /* lt, reduce: Term */
			reduce(30), /* gt, reduce: Term */
			reduce(30), /* eq, reduce: Term */
			reduce(30), /* neq, reduce: Term */
			reduce(30), /* and, reduce: Term */
			reduce(30), /* or, reduce: Term */
			reduce(30), /* mul, reduce: Term */
			reduce(30), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S42
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(33), /* lbrace, reduce: Factor */
			nil,        /* rbrace */
			reduce(33), /* plus, reduce: Factor */
			reduce(33), /* minus, reduce: Factor */
			reduce(33), /* lt, reduce: Factor */
			reduce(33), /* gt, reduce: Factor */
			reduce(33), /* eq, reduce: Factor */
			reduce(33), /* neq, reduce: Factor */
			reduce(33), /* and, reduce: Factor */
			reduce(33), /* or, reduce: Factor */
			reduce(33), /* mul, reduce: Factor */
			reduce(33), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S43
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(36), /* lbrace, reduce: Factor */
			nil,        /* rbrace */
			reduce(36), /* plus, reduce: Factor */
			reduce(36), /* minus, reduce: Factor */
			reduce(36), /* lt, reduce: Factor */
			reduce(36), /* gt, reduce: Factor */
			reduce(36), /* eq, reduce: Factor */
			reduce(36), /* neq, reduce: Factor */
			reduce(36), /* and, reduce: Factor */
			reduce(36), /* or, reduce: Factor */
			reduce(36), /* mul, reduce: Factor */
			reduce(36), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S44
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(37), /* lbrace, reduce: Bool */
			nil,        /* rbrace */
			reduce(37), /* plus, reduce: Bool */
			reduce(37), /* minus, reduce: Bool */
			reduce(37), /* lt, reduce: Bool */
			reduce(37), /* gt, reduce: Bool */
			reduce(37), /* eq, reduce: Bool */
			reduce(37), /* neq, reduce: Bool */
			reduce(37), /* and, reduce: Bool */
			reduce(37), /* or, reduce: Bool */
			reduce(37), /* mul, reduce: Bool */
			reduce(37), /* div, reduce: Bool */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S45
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(38), /* lbrace, reduce: Bool */
			nil,        /* rbrace */
			reduce(38), /* plus, reduce: Bool */
			reduce(38), /* minus, reduce: Bool */
			reduce(38), /* lt, reduce: Bool */
			reduce(38), /* gt, reduce: Bool */
			reduce(38), /* eq, reduce: Bool */
			reduce(38), /* neq, reduce: Bool */
			reduce(38), /* and, reduce: Bool */
			reduce(38), /* or, reduce: Bool */
			reduce(38), /* mul, reduce: Bool */
			reduce(38), /* div, reduce: Bool */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S46
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(10), /* $, reduce: Statement */
			nil,        /* empty */
			nil,        /* func */
			reduce(10), /* ident, reduce: Statement */
			reduce(10), /* lparen, reduce: Statement */
			nil,        /* rparen */
			reduce(10), /* if, reduce: Statement */
			reduce(10), /* for, reduce: Statement */
			reduce(10), /* let, reduce: Statement */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(10), /* return, reduce: Statement */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(10), /* string_literal, reduce: Statement */
			reduce(10), /* int, reduce: Statement */
			reduce(10), /* error, reduce: Statement */
			reduce(10), /* true, reduce: Statement */
			reduce(10), /* false, reduce: Statement */
			nil,        /* comma */
		},
	},
	actionRow{ // S47
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(7),  /* ident */
			shift(8),  /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(16), /* string_literal */
			shift(18), /* int */
			shift(19), /* error */
			shift(20), /* true */
			shift(21), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S48
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			reduce(19), /* ident, reduce: Operation */
			reduce(19), /* lparen, reduce: Operation */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(19), /* string_literal, reduce: Operation */
			reduce(19), /* int, reduce: Operation */
			reduce(19), /* error, reduce: Operation */
			reduce(19), /* true, reduce: Operation */
			reduce(19), /* false, reduce: Operation */
			nil,        /* comma */
		},
	},
	actionRow{ // S49
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			reduce(20), /* ident, reduce: Operation */
			reduce(20), /* lparen, reduce: Operation */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(20), /* string_literal, reduce: Operation */
			reduce(20), /* int, reduce: Operation */
			reduce(20), /* error, reduce: Operation */
			reduce(20), /* true, reduce: Operation */
			reduce(20), /* false, reduce: Operation */
			nil,        /* comma */
		},
	},
	actionRow{ // S50
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			reduce(21), /* ident, reduce: Operation */
			reduce(21), /* lparen, reduce: Operation */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(21), /* string_literal, reduce: Operation */
			reduce(21), /* int, reduce: Operation */
			reduce(21), /* error, reduce: Operation */
			reduce(21), /* true, reduce: Operation */
			reduce(21), /* false, reduce: Operation */
			nil,        /* comma */
		},
	},
	actionRow{ // S51
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			reduce(22), /* ident, reduce: Operation */
			reduce(22), /* lparen, reduce: Operation */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(22), /* string_literal, reduce: Operation */
			reduce(22), /* int, reduce: Operation */
			reduce(22), /* error, reduce: Operation */
			reduce(22), /* true, reduce: Operation */
			reduce(22), /* false, reduce: Operation */
			nil,        /* comma */
		},
	},
	actionRow{ // S52
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			reduce(23), /* ident, reduce: Operation */
			reduce(23), /* lparen, reduce: Operation */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(23), /* string_literal, reduce: Operation */
			reduce(23), /* int, reduce: Operation */
			reduce(23), /* error, reduce: Operation */
			reduce(23), /* true, reduce: Operation */
			reduce(23), /* false, reduce: Operation */
			nil,        /* comma */
		},
	},
	actionRow{ // S53
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			reduce(24), /* ident, reduce: Operation */
			reduce(24), /* lparen, reduce: Operation */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(24), /* string_literal, reduce: Operation */
			reduce(24), /* int, reduce: Operation */
			reduce(24), /* error, reduce: Operation */
			reduce(24), /* true, reduce: Operation */
			reduce(24), /* false, reduce: Operation */
			nil,        /* comma */
		},
	},
	actionRow{ // S54
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			reduce(25), /* ident, reduce: Operation */
			reduce(25), /* lparen, reduce: Operation */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(25), /* string_literal, reduce: Operation */
			reduce(25), /* int, reduce: Operation */
			reduce(25), /* error, reduce: Operation */
			reduce(25), /* true, reduce: Operation */
			reduce(25), /* false, reduce: Operation */
			nil,        /* comma */
		},
	},
	actionRow{ // S55
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			reduce(26), /* ident, reduce: Operation */
			reduce(26), /* lparen, reduce: Operation */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(26), /* string_literal, reduce: Operation */
			reduce(26), /* int, reduce: Operation */
			reduce(26), /* error, reduce: Operation */
			reduce(26), /* true, reduce: Operation */
			reduce(26), /* false, reduce: Operation */
			nil,        /* comma */
		},
	},
	actionRow{ // S56
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			shift(90), /* lbrace */
			nil,       /* rbrace */
			shift(48), /* plus */
			shift(49), /* minus */
			shift(50), /* lt */
			shift(51), /* gt */
			shift(52), /* eq */
			shift(53), /* neq */
			shift(54), /* and */
			shift(55), /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S57
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			shift(91), /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S58
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			shift(92), /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			shift(48), /* plus */
			shift(49), /* minus */
			shift(50), /* lt */
			shift(51), /* gt */
			shift(52), /* eq */
			shift(53), /* neq */
			shift(54), /* and */
			shift(55), /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S59
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(11), /* $, reduce: Statement */
			nil,        /* empty */
			nil,        /* func */
			reduce(11), /* ident, reduce: Statement */
			reduce(11), /* lparen, reduce: Statement */
			nil,        /* rparen */
			reduce(11), /* if, reduce: Statement */
			reduce(11), /* for, reduce: Statement */
			reduce(11), /* let, reduce: Statement */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(11), /* return, reduce: Statement */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(11), /* string_literal, reduce: Statement */
			reduce(11), /* int, reduce: Statement */
			reduce(11), /* error, reduce: Statement */
			reduce(11), /* true, reduce: Statement */
			reduce(11), /* false, reduce: Statement */
			nil,        /* comma */
		},
	},
	actionRow{ // S60
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(7),  /* ident */
			shift(8),  /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			shift(18), /* int */
			shift(19), /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S61
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(7),  /* ident */
			shift(8),  /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			shift(18), /* int */
			shift(19), /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S62
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(95),  /* ident */
			nil,        /* lparen */
			reduce(44), /* rparen, reduce: FormalArgs */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S63
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			shift(97),  /* lparen */
			reduce(34), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(34), /* plus, reduce: Factor */
			reduce(34), /* minus, reduce: Factor */
			reduce(34), /* lt, reduce: Factor */
			reduce(34), /* gt, reduce: Factor */
			reduce(34), /* eq, reduce: Factor */
			reduce(34), /* neq, reduce: Factor */
			reduce(34), /* and, reduce: Factor */
			reduce(34), /* or, reduce: Factor */
			reduce(34), /* mul, reduce: Factor */
			reduce(34), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(34), /* comma, reduce: Factor */
		},
	},
	actionRow{ // S64
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(24), /* ident */
			shift(25), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(29), /* string_literal */
			shift(31), /* int */
			shift(32), /* error */
			shift(33), /* true */
			shift(34), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S65
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(42), /* rparen, reduce: ArgsList */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(42), /* comma, reduce: ArgsList */
		},
	},
	actionRow{ // S66
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(18), /* rparen, reduce: Expression */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(18), /* plus, reduce: Expression */
			reduce(18), /* minus, reduce: Expression */
			reduce(18), /* lt, reduce: Expression */
			reduce(18), /* gt, reduce: Expression */
			reduce(18), /* eq, reduce: Expression */
			reduce(18), /* neq, reduce: Expression */
			reduce(18), /* and, reduce: Expression */
			reduce(18), /* or, reduce: Expression */
			shift(101), /* mul */
			shift(102), /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(18), /* comma, reduce: Expression */
		},
	},
	actionRow{ // S67
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(31), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(31), /* plus, reduce: Term */
			reduce(31), /* minus, reduce: Term */
			reduce(31), /* lt, reduce: Term */
			reduce(31), /* gt, reduce: Term */
			reduce(31), /* eq, reduce: Term */
			reduce(31), /* neq, reduce: Term */
			reduce(31), /* and, reduce: Term */
			reduce(31), /* or, reduce: Term */
			reduce(31), /* mul, reduce: Term */
			reduce(31), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(31), /* comma, reduce: Term */
		},
	},
	actionRow{ // S68
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(29), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(29), /* plus, reduce: Term */
			reduce(29), /* minus, reduce: Term */
			reduce(29), /* lt, reduce: Term */
			reduce(29), /* gt, reduce: Term */
			reduce(29), /* eq, reduce: Term */
			reduce(29), /* neq, reduce: Term */
			reduce(29), /* and, reduce: Term */
			reduce(29), /* or, reduce: Term */
			reduce(29), /* mul, reduce: Term */
			reduce(29), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(29), /* comma, reduce: Term */
		},
	},
	actionRow{ // S69
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(30), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(30), /* plus, reduce: Term */
			reduce(30), /* minus, reduce: Term */
			reduce(30), /* lt, reduce: Term */
			reduce(30), /* gt, reduce: Term */
			reduce(30), /* eq, reduce: Term */
			reduce(30), /* neq, reduce: Term */
			reduce(30), /* and, reduce: Term */
			reduce(30), /* or, reduce: Term */
			reduce(30), /* mul, reduce: Term */
			reduce(30), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(30), /* comma, reduce: Term */
		},
	},
	actionRow{ // S70
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(33), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(33), /* plus, reduce: Factor */
			reduce(33), /* minus, reduce: Factor */
			reduce(33), /* lt, reduce: Factor */
			reduce(33), /* gt, reduce: Factor */
			reduce(33), /* eq, reduce: Factor */
			reduce(33), /* neq, reduce: Factor */
			reduce(33), /* and, reduce: Factor */
			reduce(33), /* or, reduce: Factor */
			reduce(33), /* mul, reduce: Factor */
			reduce(33), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(33), /* comma, reduce: Factor */
		},
	},
	actionRow{ // S71
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			shift(103), /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S72
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(36), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(36), /* plus, reduce: Factor */
			reduce(36), /* minus, reduce: Factor */
			reduce(36), /* lt, reduce: Factor */
			reduce(36), /* gt, reduce: Factor */
			reduce(36), /* eq, reduce: Factor */
			reduce(36), /* neq, reduce: Factor */
			reduce(36), /* and, reduce: Factor */
			reduce(36), /* or, reduce: Factor */
			reduce(36), /* mul, reduce: Factor */
			reduce(36), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(36), /* comma, reduce: Factor */
		},
	},
	actionRow{ // S73
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(37), /* rparen, reduce: Bool */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(37), /* plus, reduce: Bool */
			reduce(37), /* minus, reduce: Bool */
			reduce(37), /* lt, reduce: Bool */
			reduce(37), /* gt, reduce: Bool */
			reduce(37), /* eq, reduce: Bool */
			reduce(37), /* neq, reduce: Bool */
			reduce(37), /* and, reduce: Bool */
			reduce(37), /* or, reduce: Bool */
			reduce(37), /* mul, reduce: Bool */
			reduce(37), /* div, reduce: Bool */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(37), /* comma, reduce: Bool */
		},
	},
	actionRow{ // S74
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(38), /* rparen, reduce: Bool */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(38), /* plus, reduce: Bool */
			reduce(38), /* minus, reduce: Bool */
			reduce(38), /* lt, reduce: Bool */
			reduce(38), /* gt, reduce: Bool */
			reduce(38), /* eq, reduce: Bool */
			reduce(38), /* neq, reduce: Bool */
			reduce(38), /* and, reduce: Bool */
			reduce(38), /* or, reduce: Bool */
			reduce(38), /* mul, reduce: Bool */
			reduce(38), /* div, reduce: Bool */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(38), /* comma, reduce: Bool */
		},
	},
	actionRow{ // S75
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(63),  /* ident */
			shift(64),  /* lparen */
			reduce(40), /* rparen, reduce: Args */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(68),  /* string_literal */
			shift(70),  /* int */
			shift(72),  /* error */
			shift(73),  /* true */
			shift(74),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S76
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			shift(105), /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S77
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(32), /* semicolon, reduce: Factor */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(32), /* plus, reduce: Factor */
			reduce(32), /* minus, reduce: Factor */
			reduce(32), /* lt, reduce: Factor */
			reduce(32), /* gt, reduce: Factor */
			reduce(32), /* eq, reduce: Factor */
			reduce(32), /* neq, reduce: Factor */
			reduce(32), /* and, reduce: Factor */
			reduce(32), /* or, reduce: Factor */
			reduce(32), /* mul, reduce: Factor */
			reduce(32), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S78
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(24), /* ident */
			shift(25), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(29), /* string_literal */
			shift(31), /* int */
			shift(32), /* error */
			shift(33), /* true */
			shift(34), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S79
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(24), /* ident */
			shift(25), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			shift(31), /* int */
			shift(32), /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S80
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(24), /* ident */
			shift(25), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			shift(31), /* int */
			shift(32), /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S81
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(63),  /* ident */
			shift(64),  /* lparen */
			reduce(40), /* rparen, reduce: Args */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(68),  /* string_literal */
			shift(70),  /* int */
			shift(72),  /* error */
			shift(73),  /* true */
			shift(74),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S82
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			shift(110), /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S83
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(15), /* $, reduce: IfStatement */
			nil,        /* empty */
			nil,        /* func */
			reduce(15), /* ident, reduce: IfStatement */
			reduce(15), /* lparen, reduce: IfStatement */
			nil,        /* rparen */
			reduce(15), /* if, reduce: IfStatement */
			reduce(15), /* for, reduce: IfStatement */
			reduce(15), /* let, reduce: IfStatement */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(15), /* return, reduce: IfStatement */
			shift(112), /* elif */
			shift(113), /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(15), /* string_literal, reduce: IfStatement */
			reduce(15), /* int, reduce: IfStatement */
			reduce(15), /* error, reduce: IfStatement */
			reduce(15), /* true, reduce: IfStatement */
			reduce(15), /* false, reduce: IfStatement */
			nil,        /* comma */
		},
	},
	actionRow{ // S84
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(7),   /* ident */
			shift(8),   /* lparen */
			nil,        /* rparen */
			shift(115), /* if */
			shift(117), /* for */
			shift(118), /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			shift(119), /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(16),  /* string_literal */
			shift(18),  /* int */
			shift(19),  /* error */
			shift(20),  /* true */
			shift(21),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S85
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(35), /* ident */
			shift(36), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(40), /* string_literal */
			shift(42), /* int */
			shift(43), /* error */
			shift(44), /* true */
			shift(45), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S86
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(35), /* ident */
			shift(36), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			shift(42), /* int */
			shift(43), /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S87
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(35), /* ident */
			shift(36), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			shift(42), /* int */
			shift(43), /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S88
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(17), /* semicolon, reduce: Expression */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(17), /* plus, reduce: Expression */
			reduce(17), /* minus, reduce: Expression */
			reduce(17), /* lt, reduce: Expression */
			reduce(17), /* gt, reduce: Expression */
			reduce(17), /* eq, reduce: Expression */
			reduce(17), /* neq, reduce: Expression */
			reduce(17), /* and, reduce: Expression */
			reduce(17), /* or, reduce: Expression */
			shift(60),  /* mul */
			shift(61),  /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S89
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(8), /* $, reduce: Statement */
			nil,       /* empty */
			nil,       /* func */
			reduce(8), /* ident, reduce: Statement */
			reduce(8), /* lparen, reduce: Statement */
			nil,       /* rparen */
			reduce(8), /* if, reduce: Statement */
			reduce(8), /* for, reduce: Statement */
			reduce(8), /* let, reduce: Statement */
			nil,       /* assign */
			nil,       /* semicolon */
			reduce(8), /* return, reduce: Statement */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			reduce(8), /* string_literal, reduce: Statement */
			reduce(8), /* int, reduce: Statement */
			reduce(8), /* error, reduce: Statement */
			reduce(8), /* true, reduce: Statement */
			reduce(8), /* false, reduce: Statement */
			nil,       /* comma */
		},
	},
	actionRow{ // S90
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(7),   /* ident */
			shift(8),   /* lparen */
			nil,        /* rparen */
			shift(115), /* if */
			shift(117), /* for */
			shift(118), /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			shift(119), /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(16),  /* string_literal */
			shift(18),  /* int */
			shift(19),  /* error */
			shift(20),  /* true */
			shift(21),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S91
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(7),  /* ident */
			shift(8),  /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(16), /* string_literal */
			shift(18), /* int */
			shift(19), /* error */
			shift(20), /* true */
			shift(21), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S92
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(12), /* $, reduce: Statement */
			nil,        /* empty */
			nil,        /* func */
			reduce(12), /* ident, reduce: Statement */
			reduce(12), /* lparen, reduce: Statement */
			nil,        /* rparen */
			reduce(12), /* if, reduce: Statement */
			reduce(12), /* for, reduce: Statement */
			reduce(12), /* let, reduce: Statement */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(12), /* return, reduce: Statement */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(12), /* string_literal, reduce: Statement */
			reduce(12), /* int, reduce: Statement */
			reduce(12), /* error, reduce: Statement */
			reduce(12), /* true, reduce: Statement */
			reduce(12), /* false, reduce: Statement */
			nil,        /* comma */
		},
	},
	actionRow{ // S93
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(27), /* semicolon, reduce: Term */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(27), /* plus, reduce: Term */
			reduce(27), /* minus, reduce: Term */
			reduce(27), /* lt, reduce: Term */
			reduce(27), /* gt, reduce: Term */
			reduce(27), /* eq, reduce: Term */
			reduce(27), /* neq, reduce: Term */
			reduce(27), /* and, reduce: Term */
			reduce(27), /* or, reduce: Term */
			reduce(27), /* mul, reduce: Term */
			reduce(27), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S94
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(28), /* semicolon, reduce: Term */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(28), /* plus, reduce: Term */
			reduce(28), /* minus, reduce: Term */
			reduce(28), /* lt, reduce: Term */
			reduce(28), /* gt, reduce: Term */
			reduce(28), /* eq, reduce: Term */
			reduce(28), /* neq, reduce: Term */
			reduce(28), /* and, reduce: Term */
			reduce(28), /* or, reduce: Term */
			reduce(28), /* mul, reduce: Term */
			reduce(28), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S95
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(125), /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S96
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			shift(126), /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S97
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(63),  /* ident */
			shift(64),  /* lparen */
			reduce(40), /* rparen, reduce: Args */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(68),  /* string_literal */
			shift(70),  /* int */
			shift(72),  /* error */
			shift(73),  /* true */
			shift(74),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S98
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			shift(128), /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S99
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(63), /* ident */
			shift(64), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(68), /* string_literal */
			shift(70), /* int */
			shift(72), /* error */
			shift(73), /* true */
			shift(74), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S100
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(39), /* rparen, reduce: Args */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			shift(130), /* comma */
		},
	},
	actionRow{ // S101
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(63), /* ident */
			shift(64), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			shift(70), /* int */
			shift(72), /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S102
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(63), /* ident */
			shift(64), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			shift(70), /* int */
			shift(72), /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S103
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			reduce(35), /* semicolon, reduce: Factor */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(35), /* plus, reduce: Factor */
			reduce(35), /* minus, reduce: Factor */
			reduce(35), /* lt, reduce: Factor */
			reduce(35), /* gt, reduce: Factor */
			reduce(35), /* eq, reduce: Factor */
			reduce(35), /* neq, reduce: Factor */
			reduce(35), /* and, reduce: Factor */
			reduce(35), /* or, reduce: Factor */
			reduce(35), /* mul, reduce: Factor */
			reduce(35), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S104
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			shift(133), /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S105
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(32), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(32), /* plus, reduce: Factor */
			reduce(32), /* minus, reduce: Factor */
			reduce(32), /* lt, reduce: Factor */
			reduce(32), /* gt, reduce: Factor */
			reduce(32), /* eq, reduce: Factor */
			reduce(32), /* neq, reduce: Factor */
			reduce(32), /* and, reduce: Factor */
			reduce(32), /* or, reduce: Factor */
			reduce(32), /* mul, reduce: Factor */
			reduce(32), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S106
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(17), /* rparen, reduce: Expression */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(17), /* plus, reduce: Expression */
			reduce(17), /* minus, reduce: Expression */
			reduce(17), /* lt, reduce: Expression */
			reduce(17), /* gt, reduce: Expression */
			reduce(17), /* eq, reduce: Expression */
			reduce(17), /* neq, reduce: Expression */
			reduce(17), /* and, reduce: Expression */
			reduce(17), /* or, reduce: Expression */
			shift(79),  /* mul */
			shift(80),  /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S107
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(27), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(27), /* plus, reduce: Term */
			reduce(27), /* minus, reduce: Term */
			reduce(27), /* lt, reduce: Term */
			reduce(27), /* gt, reduce: Term */
			reduce(27), /* eq, reduce: Term */
			reduce(27), /* neq, reduce: Term */
			reduce(27), /* and, reduce: Term */
			reduce(27), /* or, reduce: Term */
			reduce(27), /* mul, reduce: Term */
			reduce(27), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S108
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(28), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(28), /* plus, reduce: Term */
			reduce(28), /* minus, reduce: Term */
			reduce(28), /* lt, reduce: Term */
			reduce(28), /* gt, reduce: Term */
			reduce(28), /* eq, reduce: Term */
			reduce(28), /* neq, reduce: Term */
			reduce(28), /* and, reduce: Term */
			reduce(28), /* or, reduce: Term */
			reduce(28), /* mul, reduce: Term */
			reduce(28), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S109
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			shift(134), /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S110
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(32), /* lbrace, reduce: Factor */
			nil,        /* rbrace */
			reduce(32), /* plus, reduce: Factor */
			reduce(32), /* minus, reduce: Factor */
			reduce(32), /* lt, reduce: Factor */
			reduce(32), /* gt, reduce: Factor */
			reduce(32), /* eq, reduce: Factor */
			reduce(32), /* neq, reduce: Factor */
			reduce(32), /* and, reduce: Factor */
			reduce(32), /* or, reduce: Factor */
			reduce(32), /* mul, reduce: Factor */
			reduce(32), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S111
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(7), /* $, reduce: Statement */
			nil,       /* empty */
			nil,       /* func */
			reduce(7), /* ident, reduce: Statement */
			reduce(7), /* lparen, reduce: Statement */
			nil,       /* rparen */
			reduce(7), /* if, reduce: Statement */
			reduce(7), /* for, reduce: Statement */
			reduce(7), /* let, reduce: Statement */
			nil,       /* assign */
			nil,       /* semicolon */
			reduce(7), /* return, reduce: Statement */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			reduce(7), /* string_literal, reduce: Statement */
			reduce(7), /* int, reduce: Statement */
			reduce(7), /* error, reduce: Statement */
			reduce(7), /* true, reduce: Statement */
			reduce(7), /* false, reduce: Statement */
			nil,       /* comma */
		},
	},
	actionRow{ // S112
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(35), /* ident */
			shift(36), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(40), /* string_literal */
			shift(42), /* int */
			shift(43), /* error */
			shift(44), /* true */
			shift(45), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S113
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			shift(90), /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S114
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			shift(137), /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S115
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(35), /* ident */
			shift(36), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(40), /* string_literal */
			shift(42), /* int */
			shift(43), /* error */
			shift(44), /* true */
			shift(45), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S116
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			shift(139), /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S117
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(35), /* ident */
			shift(36), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(40), /* string_literal */
			shift(42), /* int */
			shift(43), /* error */
			shift(44), /* true */
			shift(45), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S118
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(141), /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S119
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(7),   /* ident */
			shift(8),   /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			shift(143), /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(16),  /* string_literal */
			shift(18),  /* int */
			shift(19),  /* error */
			shift(20),  /* true */
			shift(21),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S120
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(17), /* lbrace, reduce: Expression */
			nil,        /* rbrace */
			reduce(17), /* plus, reduce: Expression */
			reduce(17), /* minus, reduce: Expression */
			reduce(17), /* lt, reduce: Expression */
			reduce(17), /* gt, reduce: Expression */
			reduce(17), /* eq, reduce: Expression */
			reduce(17), /* neq, reduce: Expression */
			reduce(17), /* and, reduce: Expression */
			reduce(17), /* or, reduce: Expression */
			shift(86),  /* mul */
			shift(87),  /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S121
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(27), /* lbrace, reduce: Term */
			nil,        /* rbrace */
			reduce(27), /* plus, reduce: Term */
			reduce(27), /* minus, reduce: Term */
			reduce(27), /* lt, reduce: Term */
			reduce(27), /* gt, reduce: Term */
			reduce(27), /* eq, reduce: Term */
			reduce(27), /* neq, reduce: Term */
			reduce(27), /* and, reduce: Term */
			reduce(27), /* or, reduce: Term */
			reduce(27), /* mul, reduce: Term */
			reduce(27), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S122
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(28), /* lbrace, reduce: Term */
			nil,        /* rbrace */
			reduce(28), /* plus, reduce: Term */
			reduce(28), /* minus, reduce: Term */
			reduce(28), /* lt, reduce: Term */
			reduce(28), /* gt, reduce: Term */
			reduce(28), /* eq, reduce: Term */
			reduce(28), /* neq, reduce: Term */
			reduce(28), /* and, reduce: Term */
			reduce(28), /* or, reduce: Term */
			reduce(28), /* mul, reduce: Term */
			reduce(28), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S123
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			shift(144), /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S124
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			shift(145), /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S125
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(46), /* rparen, reduce: FormalArgsList */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(46), /* comma, reduce: FormalArgsList */
		},
	},
	actionRow{ // S126
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(147), /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S127
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			shift(148), /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S128
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(32), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(32), /* plus, reduce: Factor */
			reduce(32), /* minus, reduce: Factor */
			reduce(32), /* lt, reduce: Factor */
			reduce(32), /* gt, reduce: Factor */
			reduce(32), /* eq, reduce: Factor */
			reduce(32), /* neq, reduce: Factor */
			reduce(32), /* and, reduce: Factor */
			reduce(32), /* or, reduce: Factor */
			reduce(32), /* mul, reduce: Factor */
			reduce(32), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(32), /* comma, reduce: Factor */
		},
	},
	actionRow{ // S129
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(17), /* rparen, reduce: Expression */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(17), /* plus, reduce: Expression */
			reduce(17), /* minus, reduce: Expression */
			reduce(17), /* lt, reduce: Expression */
			reduce(17), /* gt, reduce: Expression */
			reduce(17), /* eq, reduce: Expression */
			reduce(17), /* neq, reduce: Expression */
			reduce(17), /* and, reduce: Expression */
			reduce(17), /* or, reduce: Expression */
			shift(101), /* mul */
			shift(102), /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(17), /* comma, reduce: Expression */
		},
	},
	actionRow{ // S130
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(63), /* ident */
			shift(64), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(68), /* string_literal */
			shift(70), /* int */
			shift(72), /* error */
			shift(73), /* true */
			shift(74), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S131
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(27), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(27), /* plus, reduce: Term */
			reduce(27), /* minus, reduce: Term */
			reduce(27), /* lt, reduce: Term */
			reduce(27), /* gt, reduce: Term */
			reduce(27), /* eq, reduce: Term */
			reduce(27), /* neq, reduce: Term */
			reduce(27), /* and, reduce: Term */
			reduce(27), /* or, reduce: Term */
			reduce(27), /* mul, reduce: Term */
			reduce(27), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(27), /* comma, reduce: Term */
		},
	},
	actionRow{ // S132
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(28), /* rparen, reduce: Term */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(28), /* plus, reduce: Term */
			reduce(28), /* minus, reduce: Term */
			reduce(28), /* lt, reduce: Term */
			reduce(28), /* gt, reduce: Term */
			reduce(28), /* eq, reduce: Term */
			reduce(28), /* neq, reduce: Term */
			reduce(28), /* and, reduce: Term */
			reduce(28), /* or, reduce: Term */
			reduce(28), /* mul, reduce: Term */
			reduce(28), /* div, reduce: Term */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(28), /* comma, reduce: Term */
		},
	},
	actionRow{ // S133
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(35), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(35), /* plus, reduce: Factor */
			reduce(35), /* minus, reduce: Factor */
			reduce(35), /* lt, reduce: Factor */
			reduce(35), /* gt, reduce: Factor */
			reduce(35), /* eq, reduce: Factor */
			reduce(35), /* neq, reduce: Factor */
			reduce(35), /* and, reduce: Factor */
			reduce(35), /* or, reduce: Factor */
			reduce(35), /* mul, reduce: Factor */
			reduce(35), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S134
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			reduce(35), /* lbrace, reduce: Factor */
			nil,        /* rbrace */
			reduce(35), /* plus, reduce: Factor */
			reduce(35), /* minus, reduce: Factor */
			reduce(35), /* lt, reduce: Factor */
			reduce(35), /* gt, reduce: Factor */
			reduce(35), /* eq, reduce: Factor */
			reduce(35), /* neq, reduce: Factor */
			reduce(35), /* and, reduce: Factor */
			reduce(35), /* or, reduce: Factor */
			reduce(35), /* mul, reduce: Factor */
			reduce(35), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S135
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			shift(84), /* lbrace */
			nil,       /* rbrace */
			shift(48), /* plus */
			shift(49), /* minus */
			shift(50), /* lt */
			shift(51), /* gt */
			shift(52), /* eq */
			shift(53), /* neq */
			shift(54), /* and */
			shift(55), /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S136
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(14), /* $, reduce: IfStatement */
			nil,        /* empty */
			nil,        /* func */
			reduce(14), /* ident, reduce: IfStatement */
			reduce(14), /* lparen, reduce: IfStatement */
			nil,        /* rparen */
			reduce(14), /* if, reduce: IfStatement */
			reduce(14), /* for, reduce: IfStatement */
			reduce(14), /* let, reduce: IfStatement */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(14), /* return, reduce: IfStatement */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(14), /* string_literal, reduce: IfStatement */
			reduce(14), /* int, reduce: IfStatement */
			reduce(14), /* error, reduce: IfStatement */
			reduce(14), /* true, reduce: IfStatement */
			reduce(14), /* false, reduce: IfStatement */
			nil,        /* comma */
		},
	},
	actionRow{ // S137
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(16), /* $, reduce: StatementBlock */
			nil,        /* empty */
			nil,        /* func */
			reduce(16), /* ident, reduce: StatementBlock */
			reduce(16), /* lparen, reduce: StatementBlock */
			nil,        /* rparen */
			reduce(16), /* if, reduce: StatementBlock */
			reduce(16), /* for, reduce: StatementBlock */
			reduce(16), /* let, reduce: StatementBlock */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(16), /* return, reduce: StatementBlock */
			reduce(16), /* elif, reduce: StatementBlock */
			reduce(16), /* else, reduce: StatementBlock */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(16), /* string_literal, reduce: StatementBlock */
			reduce(16), /* int, reduce: StatementBlock */
			reduce(16), /* error, reduce: StatementBlock */
			reduce(16), /* true, reduce: StatementBlock */
			reduce(16), /* false, reduce: StatementBlock */
			nil,        /* comma */
		},
	},
	actionRow{ // S138
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			shift(152), /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S139
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			reduce(10), /* rbrace, reduce: Statement */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S140
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			shift(154), /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S141
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			shift(155), /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S142
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			shift(156), /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S143
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			reduce(11), /* rbrace, reduce: Statement */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S144
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(16), /* $, reduce: StatementBlock */
			nil,        /* empty */
			nil,        /* func */
			reduce(16), /* ident, reduce: StatementBlock */
			reduce(16), /* lparen, reduce: StatementBlock */
			nil,        /* rparen */
			reduce(16), /* if, reduce: StatementBlock */
			reduce(16), /* for, reduce: StatementBlock */
			reduce(16), /* let, reduce: StatementBlock */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(16), /* return, reduce: StatementBlock */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(16), /* string_literal, reduce: StatementBlock */
			reduce(16), /* int, reduce: StatementBlock */
			reduce(16), /* error, reduce: StatementBlock */
			reduce(16), /* true, reduce: StatementBlock */
			reduce(16), /* false, reduce: StatementBlock */
			nil,        /* comma */
		},
	},
	actionRow{ // S145
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(9), /* $, reduce: Statement */
			nil,       /* empty */
			nil,       /* func */
			reduce(9), /* ident, reduce: Statement */
			reduce(9), /* lparen, reduce: Statement */
			nil,       /* rparen */
			reduce(9), /* if, reduce: Statement */
			reduce(9), /* for, reduce: Statement */
			reduce(9), /* let, reduce: Statement */
			nil,       /* assign */
			nil,       /* semicolon */
			reduce(9), /* return, reduce: Statement */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			reduce(9), /* string_literal, reduce: Statement */
			reduce(9), /* int, reduce: Statement */
			reduce(9), /* error, reduce: Statement */
			reduce(9), /* true, reduce: Statement */
			reduce(9), /* false, reduce: Statement */
			nil,       /* comma */
		},
	},
	actionRow{ // S146
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(43), /* rparen, reduce: FormalArgs */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			shift(157), /* comma */
		},
	},
	actionRow{ // S147
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			shift(159), /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S148
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(35), /* rparen, reduce: Factor */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			reduce(35), /* plus, reduce: Factor */
			reduce(35), /* minus, reduce: Factor */
			reduce(35), /* lt, reduce: Factor */
			reduce(35), /* gt, reduce: Factor */
			reduce(35), /* eq, reduce: Factor */
			reduce(35), /* neq, reduce: Factor */
			reduce(35), /* and, reduce: Factor */
			reduce(35), /* or, reduce: Factor */
			reduce(35), /* mul, reduce: Factor */
			reduce(35), /* div, reduce: Factor */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(35), /* comma, reduce: Factor */
		},
	},
	actionRow{ // S149
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(41), /* rparen, reduce: ArgsList */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(41), /* comma, reduce: ArgsList */
		},
	},
	actionRow{ // S150
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(15), /* $, reduce: IfStatement */
			nil,        /* empty */
			nil,        /* func */
			reduce(15), /* ident, reduce: IfStatement */
			reduce(15), /* lparen, reduce: IfStatement */
			nil,        /* rparen */
			reduce(15), /* if, reduce: IfStatement */
			reduce(15), /* for, reduce: IfStatement */
			reduce(15), /* let, reduce: IfStatement */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(15), /* return, reduce: IfStatement */
			shift(112), /* elif */
			shift(113), /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(15), /* string_literal, reduce: IfStatement */
			reduce(15), /* int, reduce: IfStatement */
			reduce(15), /* error, reduce: IfStatement */
			reduce(15), /* true, reduce: IfStatement */
			reduce(15), /* false, reduce: IfStatement */
			nil,        /* comma */
		},
	},
	actionRow{ // S151
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			shift(162), /* elif */
			shift(163), /* else */
			nil,        /* lbrace */
			reduce(15), /* rbrace, reduce: IfStatement */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S152
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(7),   /* ident */
			shift(8),   /* lparen */
			nil,        /* rparen */
			shift(115), /* if */
			shift(117), /* for */
			shift(118), /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			shift(119), /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(16),  /* string_literal */
			shift(18),  /* int */
			shift(19),  /* error */
			shift(20),  /* true */
			shift(21),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S153
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			reduce(8), /* rbrace, reduce: Statement */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S154
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(7),   /* ident */
			shift(8),   /* lparen */
			nil,        /* rparen */
			shift(115), /* if */
			shift(117), /* for */
			shift(118), /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			shift(119), /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(16),  /* string_literal */
			shift(18),  /* int */
			shift(19),  /* error */
			shift(20),  /* true */
			shift(21),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S155
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(7),  /* ident */
			shift(8),  /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(16), /* string_literal */
			shift(18), /* int */
			shift(19), /* error */
			shift(20), /* true */
			shift(21), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S156
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			reduce(12), /* rbrace, reduce: Statement */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S157
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(167), /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S158
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			reduce(6), /* $, reduce: Function */
			nil,       /* empty */
			reduce(6), /* func, reduce: Function */
			reduce(6), /* ident, reduce: Function */
			reduce(6), /* lparen, reduce: Function */
			nil,       /* rparen */
			reduce(6), /* if, reduce: Function */
			reduce(6), /* for, reduce: Function */
			reduce(6), /* let, reduce: Function */
			nil,       /* assign */
			nil,       /* semicolon */
			reduce(6), /* return, reduce: Function */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			reduce(6), /* string_literal, reduce: Function */
			reduce(6), /* int, reduce: Function */
			reduce(6), /* error, reduce: Function */
			reduce(6), /* true, reduce: Function */
			reduce(6), /* false, reduce: Function */
			nil,       /* comma */
		},
	},
	actionRow{ // S159
		canRecover: true,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(7),   /* ident */
			shift(8),   /* lparen */
			nil,        /* rparen */
			shift(115), /* if */
			shift(117), /* for */
			shift(118), /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			shift(119), /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			shift(16),  /* string_literal */
			shift(18),  /* int */
			shift(19),  /* error */
			shift(20),  /* true */
			shift(21),  /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S160
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(13), /* $, reduce: IfStatement */
			nil,        /* empty */
			nil,        /* func */
			reduce(13), /* ident, reduce: IfStatement */
			reduce(13), /* lparen, reduce: IfStatement */
			nil,        /* rparen */
			reduce(13), /* if, reduce: IfStatement */
			reduce(13), /* for, reduce: IfStatement */
			reduce(13), /* let, reduce: IfStatement */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(13), /* return, reduce: IfStatement */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(13), /* string_literal, reduce: IfStatement */
			reduce(13), /* int, reduce: IfStatement */
			reduce(13), /* error, reduce: IfStatement */
			reduce(13), /* true, reduce: IfStatement */
			reduce(13), /* false, reduce: IfStatement */
			nil,        /* comma */
		},
	},
	actionRow{ // S161
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			reduce(7), /* rbrace, reduce: Statement */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S162
		canRecover: true,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			shift(35), /* ident */
			shift(36), /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			nil,       /* rbrace */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			shift(40), /* string_literal */
			shift(42), /* int */
			shift(43), /* error */
			shift(44), /* true */
			shift(45), /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S163
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			shift(154), /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S164
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			shift(171), /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S165
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			shift(172), /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S166
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			shift(173), /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S167
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			shift(174), /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S168
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			shift(175), /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S169
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			shift(152), /* lbrace */
			nil,        /* rbrace */
			shift(48),  /* plus */
			shift(49),  /* minus */
			shift(50),  /* lt */
			shift(51),  /* gt */
			shift(52),  /* eq */
			shift(53),  /* neq */
			shift(54),  /* and */
			shift(55),  /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S170
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			reduce(14), /* rbrace, reduce: IfStatement */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S171
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			reduce(16), /* elif, reduce: StatementBlock */
			reduce(16), /* else, reduce: StatementBlock */
			nil,        /* lbrace */
			reduce(16), /* rbrace, reduce: StatementBlock */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S172
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			reduce(16), /* rbrace, reduce: StatementBlock */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S173
		canRecover: false,
		actions: [numSymbols]action{
			nil,       /* INVALID */
			nil,       /* $ */
			nil,       /* empty */
			nil,       /* func */
			nil,       /* ident */
			nil,       /* lparen */
			nil,       /* rparen */
			nil,       /* if */
			nil,       /* for */
			nil,       /* let */
			nil,       /* assign */
			nil,       /* semicolon */
			nil,       /* return */
			nil,       /* elif */
			nil,       /* else */
			nil,       /* lbrace */
			reduce(9), /* rbrace, reduce: Statement */
			nil,       /* plus */
			nil,       /* minus */
			nil,       /* lt */
			nil,       /* gt */
			nil,       /* eq */
			nil,       /* neq */
			nil,       /* and */
			nil,       /* or */
			nil,       /* mul */
			nil,       /* div */
			nil,       /* string_literal */
			nil,       /* int */
			nil,       /* error */
			nil,       /* true */
			nil,       /* false */
			nil,       /* comma */
		},
	},
	actionRow{ // S174
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			reduce(45), /* rparen, reduce: FormalArgsList */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			reduce(45), /* comma, reduce: FormalArgsList */
		},
	},
	actionRow{ // S175
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			reduce(16), /* $, reduce: StatementBlock */
			nil,        /* empty */
			reduce(16), /* func, reduce: StatementBlock */
			reduce(16), /* ident, reduce: StatementBlock */
			reduce(16), /* lparen, reduce: StatementBlock */
			nil,        /* rparen */
			reduce(16), /* if, reduce: StatementBlock */
			reduce(16), /* for, reduce: StatementBlock */
			reduce(16), /* let, reduce: StatementBlock */
			nil,        /* assign */
			nil,        /* semicolon */
			reduce(16), /* return, reduce: StatementBlock */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			nil,        /* rbrace */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			reduce(16), /* string_literal, reduce: StatementBlock */
			reduce(16), /* int, reduce: StatementBlock */
			reduce(16), /* error, reduce: StatementBlock */
			reduce(16), /* true, reduce: StatementBlock */
			reduce(16), /* false, reduce: StatementBlock */
			nil,        /* comma */
		},
	},
	actionRow{ // S176
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			shift(162), /* elif */
			shift(163), /* else */
			nil,        /* lbrace */
			reduce(15), /* rbrace, reduce: IfStatement */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
	actionRow{ // S177
		canRecover: false,
		actions: [numSymbols]action{
			nil,        /* INVALID */
			nil,        /* $ */
			nil,        /* empty */
			nil,        /* func */
			nil,        /* ident */
			nil,        /* lparen */
			nil,        /* rparen */
			nil,        /* if */
			nil,        /* for */
			nil,        /* let */
			nil,        /* assign */
			nil,        /* semicolon */
			nil,        /* return */
			nil,        /* elif */
			nil,        /* else */
			nil,        /* lbrace */
			reduce(13), /* rbrace, reduce: IfStatement */
			nil,        /* plus */
			nil,        /* minus */
			nil,        /* lt */
			nil,        /* gt */
			nil,        /* eq */
			nil,        /* neq */
			nil,        /* and */
			nil,        /* or */
			nil,        /* mul */
			nil,        /* div */
			nil,        /* string_literal */
			nil,        /* int */
			nil,        /* error */
			nil,        /* true */
			nil,        /* false */
			nil,        /* comma */
		},
	},
}
